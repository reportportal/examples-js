# Copyright 2025 EPAM Systems
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Demo with Quality Gates

on:
  workflow_dispatch:
    inputs:
      FIX_TESTS:
        description: 'Fix tests?'
        type: boolean
        default: false

env:
  WORKING_DIR : 'example-playwright'
  SCRIPT_TIMEOUT_SECONDS: 60
  REQUEST_TIMEOUT_SECONDS: 60

jobs:
  playwright-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          npm run test:basic | tee ./console.log || true
          sed -rn 's/Report Portal Launch UUID: ([^\\r\\n]+)/LAUNCH_UUID=\1/ p' ./console.log  >> "$GITHUB_ENV"
          # Verify LAUNCH_UUID was extracted
          if ! grep -q "LAUNCH_UUID=" "$GITHUB_ENV"; then
            echo "Warning: LAUNCH_UUID not found in console output"
            echo "Console log content:"
            cat ./console.log
            echo "Searching for Launch UUID patterns:"
            grep -i "launch.*uuid" ./console.log || echo "No Launch UUID patterns found"
            exit 1
          fi
        env:
          RP_API_KEY: ${{ secrets.RP_API_KEY }}
          RP_ENDPOINT: ${{ secrets.RP_ENDPOINT }}
          RP_PROJECT: ${{ secrets.RP_PROJECT }}
          RP_FIX_TESTS: ${{ github.event.inputs.FIX_TESTS }}
      
      - name: Debug LAUNCH_UUID
        run: |
          echo "LAUNCH_UUID from environment: '$LAUNCH_UUID'"
          if [ -z "$LAUNCH_UUID" ]; then
            echo "ERROR: LAUNCH_UUID is empty or not set"
            exit 1
          fi
      
      - name: Check RP Quality Gates
        run: |
          echo "Quality gates for: "
          echo "LAUNCH_UUID: $LAUNCH_UUID"
          QUALITY_GATE_STATUS=""
          START_TIME=$(date +%s)
          while ( [ -z "$QUALITY_GATE_STATUS" ] || [ "$QUALITY_GATE_STATUS" == "UNDEFINED" ] ) && [ $(( $(date +%s) - START_TIME )) -lt ${{ env.SCRIPT_TIMEOUT_SECONDS }} ]; do
            echo "Waiting for quality gate status..."
            sleep 10
            QUALITY_GATE_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.RP_API_KEY }}" --max-time "${{ env.REQUEST_TIMEOUT_SECONDS }}" "${{ secrets.RP_ENDPOINT }}/${{ secrets.RP_PROJECT }}/launch/${LAUNCH_UUID}")
            QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_JSON" | jq -r '.metadata.qualityGate.status // empty')
          done
          if [ "$QUALITY_GATE_STATUS" != "PASSED" ]; then
            echo "Quality gate status: $QUALITY_GATE_STATUS"
            echo "Failing the pipeline."
            exit 1
          else
            echo "Quality gate status: $QUALITY_GATE_STATUS"
            echo "Pipeline passed."
          fi